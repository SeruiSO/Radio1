// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –Ω–∞ –ø–æ—á–∞—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è Temporal Dead Zone
let currentTab = localStorage.getItem("currentTab") || "techno";
let hasUserInteracted = false;
let currentIndex = 0;
let favoriteStations = JSON.parse(localStorage.getItem("favoriteStations")) || [];
let isPlaying = localStorage.getItem("isPlaying") === "true" || false;
let stationLists = {};
let stationItems;
let abortController = new AbortController();
let errorCount = 0;
const ERROR_LIMIT = 5;

// –ö–µ—à—É–≤–∞–Ω–Ω—è DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤
const elements = {
  audio: document.getElementById("audioPlayer"),
  stationList: document.getElementById("stationList"),
  playPauseBtn: document.querySelector(".controls .control-btn:nth-child(2)"),
  currentStationInfo: document.getElementById("currentStationInfo"),
  themeToggle: document.querySelector(".theme-toggle"),
  themeSelect: document.getElementById("theme-select"),
  bluetoothBtn: document.getElementById("bluetooth-btn"),
  prevBtn: document.querySelector(".controls .control-btn:nth-child(1)"),
  nextBtn: document.querySelector(".controls .control-btn:nth-child(3)")
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è debounce
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener("DOMContentLoaded", () => {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  if (!elements.audio || !elements.stationList || !elements.playPauseBtn || !elements.currentStationInfo || !elements.themeToggle || !elements.themeSelect || !elements.bluetoothBtn) {
    console.error("–û–¥–∏–Ω —ñ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    setTimeout(initializeApp, 100);
    return;
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
  initializeApp();

  function initializeApp() {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ
    elements.audio.preload = "auto";
    elements.audio.volume = parseFloat(localStorage.getItem("volume")) || 0.9;

    // –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll(".tab-btn").forEach((btn, index) => {
      const tabs = ["best", "techno", "trance", "ukraine", "pop"];
      const tab = tabs[index];
      btn.addEventListener("click", () => switchTab(tab));
    });

    // –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    elements.prevBtn.addEventListener("click", prevStation);
    elements.playPauseBtn.addEventListener("click", togglePlayPause);
    elements.nextBtn.addEventListener("click", nextStation);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ URL
    function isValidUrl(url) {
      return /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/i.test(url);
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∞–Ω—Ü—ñ—é
    function resetStationInfo() {
      const stationNameElement = elements.currentStationInfo.querySelector(".station-name");
      const stationGenreElement = elements.currentStationInfo.querySelector(".station-genre");
      const stationCountryElement = elements.currentStationInfo.querySelector(".station-country");
      if (stationNameElement) stationNameElement.textContent = "–û–±–∏—Ä–∞–π—Ç–µ —Å—Ç–∞–Ω—Ü—ñ—é";
      else console.error("–ï–ª–µ–º–µ–Ω—Ç .station-name –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ currentStationInfo");
      if (stationGenreElement) stationGenreElement.textContent = "–∂–∞–Ω—Ä: -";
      else console.error("–ï–ª–µ–º–µ–Ω—Ç .station-genre –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ currentStationInfo");
      if (stationCountryElement) stationCountryElement.textContent = "–∫—Ä–∞—ó–Ω–∞: -";
      else console.error("–ï–ª–µ–º–µ–Ω—Ç .station-country –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ currentStationInfo");
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—Ü—ñ–π
    async function loadStations() {
      console.time("loadStations");
      elements.stationList.innerHTML = "<div class='station-item empty'>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>";
      try {
        abortController.abort();
        abortController = new AbortController();
        const response = await fetch(`stations.json?t=${Date.now()}`, {
          cache: "no-cache",
          headers: {
            "If-Modified-Since": localStorage.getItem("stationsLastModified") || ""
          },
          signal: abortController.signal
        });
        console.log(`–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.status}`);
        if (response.status === 304) {
          const cachedData = await caches.match("stations.json");
          if (cachedData) {
            stationLists = await cachedData.json();
            console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–µ—à–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è stations.json");
          } else {
            throw new Error("–ö–µ—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
          }
        } else if (response.ok) {
          stationLists = await response.json();
          localStorage.setItem("stationsLastModified", response.headers.get("Last-Modified") || "");
          console.log("–ù–æ–≤–∏–π stations.json —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
        favoriteStations = favoriteStations.filter(name => 
          Object.values(stationLists).flat().some(s => s.name === name)
        );
        localStorage.setItem("favoriteStations", JSON.stringify(favoriteStations));
        const validTabs = [...Object.keys(stationLists), "best"];
        if (!validTabs.includes(currentTab)) {
          currentTab = validTabs[0] || "techno";
          localStorage.setItem("currentTab", currentTab);
        }
        currentIndex = parseInt(localStorage.getItem(`lastStation_${currentTab}`)) || 0;
        switchTab(currentTab);
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—Ü—ñ–π:", error);
          elements.stationList.innerHTML = "<div class='station-item empty'>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞–Ω—Ü—ñ—ó</div>";
        }
      } finally {
        console.timeEnd("loadStations");
      }
    }

    // –¢–µ–º–∏ (—É—Å—É–Ω—É—Ç–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤)
    const themes = {
      "neon-pulse": {
        bodyBg: "#0A0A0A",
        containerBg: "#121212",
        accent: "#00F0FF",
        text: "#F0F0F0",
        accentGradient: "#003C4B"
      },
      "lime-surge": {
        bodyBg: "#1A1A1A",
        containerBg: "#222222",
        accent: "#B2FF59",
        text: "#E8F5E9",
        accentGradient: "#2E4B2F"
      },
      "flamingo-flash": {
        bodyBg: "#141414",
        containerBg: "#1C1C1C",
        accent: "#FF4081",
        text: "#FCE4EC",
        accentGradient: "#4B1A2E"
      },
      "violet-vortex": {
        bodyBg: "#121212",
        containerBg: "#1A1A1A",
        accent: "#7C4DFF",
        text: "#EDE7F6",
        accentGradient: "#2E1A47"
      },
      "aqua-glow": {
        bodyBg: "#0E0E0E",
        containerBg: "#161616",
        accent: "#26C6DA",
        text: "#B2EBF2",
        accentGradient: "#1A3C4B"
      },
      "cosmic-indigo": {
        bodyBg: "#111111",
        containerBg: "#191919",
        accent: "#3F51B5",
        text: "#BBDEFB",
        accentGradient: "#1A2A5A"
      },
      "mystic-jade": {
        bodyBg: "#0C0C0C",
        containerBg: "#141414",
        accent: "#26A69A",
        text: "#B2DFDB",
        accentGradient: "#1A3C4B"
      },
      "aurora-haze": {
        bodyBg: "#131313",
        containerBg: "#1B1B1B",
        accent: "#64FFDA",
        text: "#E0F7FA",
        accentGradient: "#1A4B4B"
      },
      "starlit-amethyst": {
        bodyBg: "#0B0B0B",
        containerBg: "#131313",
        accent: "#B388FF",
        text: "#E1BEE7",
        accentGradient: "#2E1A47"
      },
      "lunar-frost": {
        bodyBg: "#F5F7FA",
        containerBg: "#FFFFFF",
        accent: "#40C4FF",
        text: "#212121",
        accentGradient: "#B3E5FC"
      }
    };
    let currentTheme = localStorage.getItem("selectedTheme") || "neon-pulse";

    function applyTheme(theme) {
      const root = document.documentElement;
      root.style.setProperty("--body-bg", themes[theme].bodyBg);
      root.style.setProperty("--container-bg", themes[theme].containerBg);
      root.style.setProperty("--accent", themes[theme].accent);
      root.style.setProperty("--text", themes[theme].text);
      root.style.setProperty("--accent-gradient", themes[theme].accentGradient);
      localStorage.setItem("selectedTheme", theme);
      currentTheme = theme;
      document.documentElement.setAttribute("data-theme", theme);
      const themeColorMeta = document.querySelector('meta[name="theme-color"]');
      if (themeColorMeta) {
        themeColorMeta.setAttribute("content", themes[theme].accent);
      }
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ theme-toggle
      elements.themeToggle.textContent = theme === "lunar-frost" ? "‚òÄÔ∏è" : "üåô";
    }

    // –ü–æ–ø—É–ª—è—Ü—ñ—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–µ–º
    function populateThemeSelect() {
      const themeOptions = Object.keys(themes).map(theme => 
        `<option value="${theme}" ${theme === currentTheme ? "selected" : ""}>${theme}</option>`
      ).join('');
      elements.themeSelect.innerHTML = themeOptions;
      elements.themeSelect.addEventListener('change', () => applyTheme(elements.themeSelect.value));
    }

    function toggleTheme() {
      const themesOrder = [
        "neon-pulse",
        "lime-surge",
        "flamingo-flash",
        "violet-vortex",
        "aqua-glow",
        "cosmic-indigo",
        "mystic-jade",
        "aurora-haze",
        "starlit-amethyst",
        "lunar-frost"
      ];
      const nextTheme = themesOrder[(themesOrder.indexOf(currentTheme) + 1) % themesOrder.length];
      applyTheme(nextTheme);
      elements.themeSelect.value = nextTheme;
    }

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–º–∏
    elements.themeToggle.addEventListener("click", toggleTheme);
    populateThemeSelect();

    // Bluetooth —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
    async function connectToBluetooth() {
      try {
        const device = await navigator.bluetooth.requestDevice({
          acceptAllDevices: true,
          optionalServices: ['battery_service', 'device_information']
        });
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ:', device.name);
        // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —á–µ—Ä–µ–∑ Bluetooth
        const server = await device.gatt.connect();
        console.log('GATT —Å–µ—Ä–≤–µ—Ä –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ Bluetooth:', error);
      }
    }

    elements.bluetoothBtn.addEventListener('click', connectToBluetooth);

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Service Worker
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.register("sw.js").then(registration => {
        registration.update();
        registration.addEventListener("updatefound", () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener("statechange", () => {
              if (newWorker.state === "activated" && navigator.serviceWorker.controller) {
                if (window.confirm("–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è —Ä–∞–¥—ñ–æ. –û–Ω–æ–≤–∏—Ç–∏?")) {
                  window.location.reload();
                }
              }
            });
          }
        });
      });

      navigator.serviceWorker.addEventListener("message", event => {
        if (event.data.type === "NETWORK_STATUS" && event.data.online && isPlaying && stationItems?.length && currentIndex < stationItems.length) {
          console.log("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Service Worker: –º–µ—Ä–µ–∂–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞");
          elements.audio.pause();
          elements.audio.src = "";
          elements.audio.src = stationItems[currentIndex].dataset.value;
          tryAutoPlay();
        }
      });
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø—Ä–æ–±–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    function tryAutoPlay() {
      if (!navigator.onLine) {
        console.log("–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è");
        return;
      }
      if (!isPlaying || !stationItems?.length || currentIndex >= stationItems.length || !hasUserInteracted) {
        console.log("–ü—Ä–æ–ø—É—Å–∫ tryAutoPlay", { isPlaying, hasStationItems: !!stationItems?.length, isIndexValid: currentIndex < stationItems.length, hasUserInteracted });
        document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "paused");
        return;
      }
      if (elements.audio.src === stationItems[currentIndex].dataset.value && !elements.audio.paused) {
        console.log("–ü—Ä–æ–ø—É—Å–∫ tryAutoPlay: –∞—É–¥—ñ–æ –≤–∂–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º src");
        return;
      }
      if (!isValidUrl(stationItems[currentIndex].dataset.value)) {
        console.error("–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π URL:", stationItems[currentIndex].dataset.value);
        errorCount++;
        if (errorCount >= ERROR_LIMIT) {
          console.error("–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è");
        }
        document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "paused");
        return;
      }
      elements.audio.pause();
      elements.audio.src = "";
      elements.audio.src = stationItems[currentIndex].dataset.value;
      console.log("–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", elements.audio.src);
      const playPromise = elements.audio.play();

      playPromise
        .then(() => {
          errorCount = 0;
          console.log("–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ —É—Å–ø—ñ—à–Ω–æ");
          document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "running");
        })
        .catch(error => {
          console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", error);
          if (error.name !== "AbortError") {
            errorCount++;
            if (errorCount >= ERROR_LIMIT) {
              console.error("–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è");
            }
          }
          document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "paused");
        });
    }

    // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
    function switchTab(tab) {
      if (!["techno", "trance", "ukraine", "pop", "best"].includes(tab)) tab = "techno";
      currentTab = tab;
      localStorage.setItem("currentTab", tab);
      const savedIndex = parseInt(localStorage.getItem(`lastStation_${tab}`)) || 0;
      const maxIndex = tab === "best" ? favoriteStations.length : stationLists[tab]?.length || 0;
      currentIndex = savedIndex < maxIndex ? savedIndex : 0;
      updateStationList();
      document.querySelectorAll(".tab-btn").forEach(btn => btn.classList.remove("active"));
      const activeBtn = document.querySelector(`.tab-btn:nth-child(${["best", "techno", "trance", "ukraine", "pop"].indexOf(tab) + 1})`);
      if (activeBtn) activeBtn.classList.add("active");
      if (stationItems?.length && currentIndex < stationItems.length) tryAutoPlay();
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç–∞–Ω—Ü—ñ–π –∑ –Ω–æ–≤–∏–º–∏ –µ–º–æ–¥–∑—ñ
    function updateStationList() {
      if (!elements.stationList) {
        console.error("stationList –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
      }
      let stations = currentTab === "best"
        ? favoriteStations
            .map(name => Object.values(stationLists).flat().find(s => s.name === name))
            .filter(s => s)
        : stationLists[currentTab] || [];

      if (!stations.length) {
        currentIndex = 0;
        stationItems = [];
        elements.stationList.innerHTML = `<div class='station-item empty'>${currentTab === "best" ? "–ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π" : "–ù–µ–º–∞—î —Å—Ç–∞–Ω—Ü—ñ–π —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"}</div>`;
        return;
      }

      // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –µ–º–æ–¥–∑—ñ –∑–∞ –∂–∞–Ω—Ä–æ–º
      const genreEmojis = {
        "Techno": "üéõÔ∏è",
        "Minimal Techno": "üéõÔ∏è",
        "Melodic Techno": "üéõÔ∏è",
        "Big Room": "üéõÔ∏è",
        "Trance": "üéµ",
        "Vocal Trance": "üéµ",
        "Uplifting Trance": "üéµ",
        "Psytrance": "üéµ",
        "–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω–∞ –º—É–∑–∏–∫–∞": "üíÉ",
        "–¢–∞–Ω—Ü—é–≤–∞–ª—å–Ω–∞/EDM": "üíÉ",
        "–ü–æ–ø-–º—É–∑–∏–∫–∞": "üé§",
        "–†–æ–∫-–º—É–∑–∏–∫–∞": "üé∏",
        "–õ–µ–≥–∫–∞ –º—É–∑–∏–∫–∞": "üåø",
        "–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞ –º—É–∑–∏–∫–∞": "üéµ",
        "–®–∞–Ω—Å–æ–Ω/–ï—Å—Ç—Ä–∞–¥–∞": "üéô",
        "–ö–ª–∞—Å–∏—á–Ω–∞ –º—É–∑–∏–∫–∞": "üéª",
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º—É–∑–∏–∫–∞": "üá∫üá¶",
        "Pop": "üé§",
        "Pop/Top 40": "üé§",
        "Pop/Rock": "üé∏",
        "Christian Pop": "üé§",
        "Italo-Pop": "üé§",
        "default": "üìª"
      };

      const fragment = document.createDocumentFragment();
      stations.forEach((station, index) => {
        const item = document.createElement("div");
        item.className = `station-item ${index === currentIndex ? "selected" : ""}`;
        item.dataset.value = station.value;
        item.dataset.name = station.name;
        item.dataset.genre = station.genre;
        item.dataset.country = station.country;
        const emoji = genreEmojis[station.genre] || genreEmojis.default;
        item.innerHTML = `${emoji} ${station.name}<button class="favorite-btn${favoriteStations.includes(station.name) ? " favorited" : ""}">‚òÖ</button>`;
        fragment.appendChild(item);
      });
      elements.stationList.innerHTML = "";
      elements.stationList.appendChild(fragment);
      stationItems = elements.stationList.querySelectorAll(".station-item");

      if (stationItems.length && currentIndex < stationItems.length && !stationItems[currentIndex].classList.contains("empty")) {
        stationItems[currentIndex].scrollIntoView({ behavior: "smooth", block: "start" });
      }

      elements.stationList.onclick = e => {
        const item = e.target.closest(".station-item");
        const favoriteBtn = e.target.closest(".favorite-btn");
        hasUserInteracted = true;
        if (item && !item.classList.contains("empty")) {
          currentIndex = Array.from(stationItems).indexOf(item);
          changeStation(currentIndex);
        }
        if (favoriteBtn) {
          e.stopPropagation();
          toggleFavorite(favoriteBtn.parentElement.dataset.name);
        }
      };

      if (stationItems.length && currentIndex < stationItems.length) {
        changeStation(currentIndex);
      }
    }

    // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    function toggleFavorite(stationName) {
      hasUserInteracted = true;
      if (favoriteStations.includes(stationName)) {
        favoriteStations = favoriteStations.filter(name => name !== stationName);
      } else {
        favoriteStations.unshift(stationName);
      }
      localStorage.setItem("favoriteStations", JSON.stringify(favoriteStations));
      if (currentTab === "best") switchTab("best");
      else updateStationList();
    }

    // –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—ó
    function changeStation(index) {
      if (index < 0 || index >= stationItems.length || stationItems[index].classList.contains("empty")) return;
      const item = stationItems[index];
      stationItems?.forEach(i => i.classList.remove("selected"));
      item.classList.add("selected");
      currentIndex = index;
      updateCurrentStationInfo(item);
      localStorage.setItem(`lastStation_${currentTab}`, currentIndex);
      tryAutoPlay();
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∞–Ω—Ü—ñ—é
    function updateCurrentStationInfo(item) {
      if (!elements.currentStationInfo) {
        console.error("currentStationInfo –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
      }
      const stationNameElement = elements.currentStationInfo.querySelector(".station-name");
      const stationGenreElement = elements.currentStationInfo.querySelector(".station-genre");
      const stationCountryElement = elements.currentStationInfo.querySelector(".station-country");

      console.log("–û–Ω–æ–≤–ª–µ–Ω–Ω—è currentStationInfo –∑ –¥–∞–Ω–∏–º–∏:", item.dataset);

      if (stationNameElement) {
        stationNameElement.textContent = item.dataset.name || "Unknown";
      } else {
        console.error("–ï–ª–µ–º–µ–Ω—Ç .station-name –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ currentStationInfo");
      }
      if (stationGenreElement) {
        stationGenreElement.textContent = `–∂–∞–Ω—Ä: ${item.dataset.genre || "Unknown"}`;
      } else {
        console.error("–ï–ª–µ–º–µ–Ω—Ç .station-genre –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ currentStationInfo");
      }
      if (stationCountryElement) {
        stationCountryElement.textContent = `–∫—Ä–∞—ó–Ω–∞: ${item.dataset.country || "Unknown"}`;
      } else {
        console.error("–ï–ª–µ–º–µ–Ω—Ç .station-country –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ currentStationInfo");
      }
      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: item.dataset.name || "Unknown Station",
          artist: `${item.dataset.genre || "Unknown"} | ${item.dataset.country || "Unknown"}`,
          album: "Radio Music"
        });
      }
    }

    // –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
    function prevStation() {
      hasUserInteracted = true;
      currentIndex = currentIndex > 0 ? currentIndex - 1 : stationItems.length - 1;
      if (stationItems[currentIndex].classList.contains("empty")) currentIndex = 0;
      changeStation(currentIndex);
    }

    function nextStation() {
      hasUserInteracted = true;
      currentIndex = currentIndex < stationItems.length - 1 ? currentIndex + 1 : 0;
      if (stationItems[currentIndex].classList.contains("empty")) currentIndex = 0;
      changeStation(currentIndex);
    }

    function togglePlayPause() {
      if (!elements.playPauseBtn || !elements.audio) {
        console.error("playPauseBtn –∞–±–æ audio –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
      }
      hasUserInteracted = true;
      if (elements.audio.paused) {
        isPlaying = true;
        tryAutoPlay();
        elements.playPauseBtn.textContent = "‚è∏";
        document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "running");
      } else {
        elements.audio.pause();
        isPlaying = false;
        elements.playPauseBtn.textContent = "‚ñ∂";
        document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "paused");
      }
      localStorage.setItem("isPlaying", isPlaying);
    }

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    const eventListeners = {
      keydown: e => {
        hasUserInteracted = true;
        if (e.key === "ArrowLeft") prevStation();
        if (e.key === "ArrowRight") nextStation();
        if (e.key === " ") {
          e.preventDefault();
          togglePlayPause();
        }
      },
      visibilitychange: () => {
        if (!document.hidden && isPlaying && navigator.onLine) {
          if (!elements.audio.paused) return;
          elements.audio.pause();
          elements.audio.src = "";
          elements.audio.src = stationItems[currentIndex].dataset.value;
          tryAutoPlay();
        }
      },
      resume: () => {
        if (isPlaying && navigator.connection?.type !== "none") {
          if (!elements.audio.paused) return;
          elements.audio.pause();
          elements.audio.src = "";
          elements.audio.src = stationItems[currentIndex].dataset.value;
          tryAutoPlay();
        }
      }
    };

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ
    function addEventListeners() {
      document.addEventListener("keydown", debounce(eventListeners.keydown, 200));
      document.addEventListener("visibilitychange", eventListeners.visibilitychange);
      document.addEventListener("resume", eventListeners.resume);
    }

    // –û—á–∏—â–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤
    function removeEventListeners() {
      document.removeEventListener("keydown", eventListeners.keydown);
      document.removeEventListener("visibilitychange", eventListeners.visibilitychange);
      document.removeEventListener("resume", eventListeners.resume);
    }

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
    elements.audio.addEventListener("playing", () => {
      isPlaying = true;
      elements.playPauseBtn.textContent = "‚è∏";
      document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "running");
      localStorage.setItem("isPlaying", isPlaying);
    });

    elements.audio.addEventListener("pause", () => {
      isPlaying = false;
      elements.playPauseBtn.textContent = "‚ñ∂";
      document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "paused");
      localStorage.setItem("isPlaying", isPlaying);
      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = null;
      }
    });

    elements.audio.addEventListener("error", () => {
      document.querySelectorAll(".wave-bar").forEach(bar => bar.style.animationPlayState = "paused");
      console.error("–ü–æ–º–∏–ª–∫–∞ –∞—É–¥—ñ–æ:", elements.audio.error?.message, "–¥–ª—è URL:", elements.audio.src);
      if (isPlaying && errorCount < ERROR_LIMIT) {
        errorCount++;
        setTimeout(() => {
          elements.audio.src = stationItems[currentIndex].dataset.value;
          tryAutoPlay();
        }, 2000);
      } else if (errorCount >= ERROR_LIMIT) {
        console.error("–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è");
      }
    });

    elements.audio.addEventListener("volumechange", () => {
      localStorage.setItem("volume", elements.audio.volume);
    });

    // –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ä–µ–∂—ñ
    window.addEventListener("online", () => {
      console.log("–ú–µ—Ä–µ–∂–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞");
      if (isPlaying && stationItems?.length && currentIndex < stationItems.length) {
        elements.audio.pause();
        elements.audio.src = "";
        elements.audio.src = stationItems[currentIndex].dataset.value;
        tryAutoPlay();
      }
    });

    window.addEventListener("offline", () => {
      console.log("–í—Ç—Ä–∞—á–µ–Ω–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é");
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ª—É—Ö–∞—á—ñ–≤
    addEventListeners();

    // –û—á–∏—â–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    window.addEventListener("beforeunload", () => {
      removeEventListeners();
    });

    // Media Session API –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é seekforward/seekbackward
    if ("mediaSession" in navigator) {
      navigator.mediaSession.setActionHandler("play", togglePlayPause);
      navigator.mediaSession.setActionHandler("pause", togglePlayPause);
      navigator.mediaSession.setActionHandler("previoustrack", prevStation);
      navigator.mediaSession.setActionHandler("nexttrack", nextStation);
      navigator.mediaSession.setActionHandler("seekforward", nextStation);
      navigator.mediaSession.setActionHandler("seekbackward", prevStation);
    }

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    document.addEventListener("click", () => {
      hasUserInteracted = true;
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    applyTheme(currentTheme);
    loadStations();
  }
});